<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <description>Spring管理数据库配置</description>


    <!-- 属性文件配置 -->
    <bean id="propertyConfigurer" class="com.lohasle.baseframe.s4m3.common.MyPropertyPlaceholderConfigurer"
          lazy-init="false">
        <property name="locations">
            <list>
                <value>classpath*:config.properties</value>
            </list>
        </property>
    </bean>

    <!-- Druid数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="DriverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="maxActive" value="${db.maxActive}"/>
        <property name="initialSize" value="${db.initialSize}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${db.maxWait}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${db.minIdle}"/>
        <!-- 逐出连接的检测时间间隔 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>
        <!-- 最小逐出时间 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>
        <!-- 测试有效用的SQL Query -->
        <property name="validationQuery" value="${db.validationQuery}"/>
        <!-- 连接空闲时测试是否有效 -->
        <property name="testWhileIdle" value="${db.testWhileIdle}"/>
        <!-- 获取连接时测试是否有效 -->
        <property name="testOnBorrow" value="${db.testOnBorrow}"/>
        <!-- 归还连接时是否测试有效 -->
        <property name="testOnReturn" value="${db.testOnReturn}"/>

        <property name="filters" value="mergeStat"/>
    </bean>


    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 别名 -->
        <property name="typeAliasesPackage" value="com.lohasle.baseframe.s4m3.entities"/>

        <property name="configLocation" value="classpath:mybatis/configuration.xml"/>

        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations">
            <list>
                <value>
                    classpath:mybatis/sqlmap/${db.dialect}/**/*.xml
                </value>
            </list>
        </property>
    </bean>

    <!-- 扫描basePackage接口 dao层的实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lohasle.baseframe.s4m3.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 事务管理，@Transactional("sw") -->
    <bean id="sw" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
        <qualifier type="org.springframework.beans.factory.annotation.Qualifier" value="sw" />
    </bean>

    <!-- 使用annotation定义数据库事务 -->
    <tx:annotation-driven transaction-manager="sw"  proxy-target-class="true" />
    <!--  end -->



</beans>